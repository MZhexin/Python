# 作者： 世界第一大帅哥
# 开发时间 2022/1/7 11:57
# 位运算符（需要先将数据转换为二进制再计算）

# 位与&：对应数位都是1，结果数位才是1，否则都是0
# 以4&8为例：4的二进制为00000100,8的二进制为00001000
# 0 0 0 0 0 1 0 0 （4）
# 0 0 0 0 1 0 0 0 （8）
# 0 0 0 0 0 0 0 0 （0）  对比4和8的对应数位，对应数位都是1，结果数位才是1，否则都是0
print(4 & 8)  # 结果为0


# 位或|：# 对应数位都是0，结果数位才是0，否则都为1（即对应数位只要有一个1，结果就为1）
# 以4&8为例：4的二进制为00000100,8的二进制为00001000
# 0 0 0 0 0 1 0 0 （4）
# 0 0 0 0 1 0 0 0 （8）
# 0 0 0 0 1 1 0 0 （12）  对比4和8的对应数位，对应数位都是0，结果数位才是0，否则都为1
print(4 | 8)  # 结果为12


# 左移<<：高位溢出舍弃，低位补0
# 以4<<1为例：4的二进制为00000100，1表示移动1格
#  0 0 0 0 0 1 0 0 （4）
#  0 0 0 0 1 0 0 0 （8）
#  所有数位往左挪1格（<<符号后面跟的是几，就移动几格）
#  开头超出8个数位范围的叫高位溢出，舍弃；末尾空下来的那一格叫低位，需要进行补0操作
print(4 << 1)  # 结果为8


# 右移>>: 低位溢出舍弃，高位补0
# 以4>>1为例：4的二进制为00000100，1表示移动1格
#  0 0 0 0 0 1 0 0 （4）
#  0 0 0 0 0 0 1 0 （8）
#  所有数位往右挪1格（<<符号后面跟的是几，就移动几格）
#  末尾超出8个数位范围的叫低位溢出，舍弃；开头空下来的那一格叫高位，需要进行补0操作
print(4 >> 1)  # 结果为2


# 根据二进制和位移运算符原理，可以推导出：
# 左移一位相当于乘2
# 右移一位相当于除以2（如果结果出现小数需要取整）
