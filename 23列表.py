# 作者： 世界第一大帅哥
# 开发时间 2022/1/11 0:36

# 为什么需要列表？
# 变量可以储存一个元素，而列表是一个大容器，可以储存N多个元素且程序可以方便地对这些元素进行整体操作
# 列表类似于其他语言中的数组（但Python中的列表可以同时存储多种类型的变量）
lst = ['Hello', 'world', 98]
print(id(lst))         # 结果为2317261928128（每台设备给的id不一样）
print(type(lst))       # 结果为<class 'list'>
print(lst)             # 结果为['Hello', 'world', 98]

# 列表的创建
# 第一种方式：利用方括号[]
lst1 = ['Hello', 'world', 98]
# 第二种方式：利用内置函数list()
lst2 = list(['Hello', 'world', 98])

'''
   列表的特点：
   1、列表元素按顺序有序排序；
   2、索引映射唯一一个数据；
   3、列表可以存储重复数据；
   4、任意类型数据混存；
   5、根据需要动态分配、回收内存。
'''

# 获取指定元素的索引:利用index()
lst3 = ['Hello', 'world', 98, 'Hello']
print(lst3.index('Hello'))         # 注意此处lst3和index之间是英文句号'.'而非逗号','
print(lst3.index('Hello', 1, 4))   # 在索引为1到4之间（即左数第二、三、四个元素之间）查找Hello并打印其索引
'''
   关于index（）
   1、如果列表中有相同元素，只返回列表中该相同元素的第一个元素的索引；
   2、如果查询的元素不在列表中，则会报错：ValueError；
   3、还可以在指定的起始值（start）和终止点（stop）之间查找。
'''

# 获取列表中指定的单个元素
lst4 = ['Hello', 'world', 98, 'Hello', 'world', 234]
print(lst4[2])     # 获取索引为2的元素（即98）
print(lst[-3])     # 获取索引为-3的元素（即紧跟在98后面的那个Hello）
'''
   获取列表中指定的单个元素（假设一共有N个元素）：
   1、正向索引：从0到N-1（e.g. lst[0]）
   2、逆向索引：从-N到-1（e.g. lst[-N]）
   3、指定索引不存在，则会报错：IndexError；
'''

# 切片:获取列表的多个元素（格式如下）
# 列表名[起始值的索引:终止点的索引:步长]
lst5 = [10, 20, 30, 40, 50, 60, 70, 80]
print(lst5[1:6:1])     # 结果为[20, 30, 40, 50, 60]
print(lst5[1:6:2])     # 结果为[20, 40, 60]
# 切片生成的新列表的id与之前不一样
print('原列表的id：', id(lst5))
print('新列表的id：', id(lst5[1:6:1]))
# 采用默认步长的两种写法（默认步长为1）
print(lst5[1:6])       # 结果为[20, 30, 40, 50, 60]
print(lst5[1:6:])      # 结果为[20, 30, 40, 50, 60]
print('————————————————步长为正的情况————————————————')
# 采用默认起始值的写法（默认从第一个元素开始）
print(lst5[:6:2])      # 结果为[10, 30, 50]
# 采用默认终止点的写法（默认切到最后一个元素为止）
print(lst5[1::2])      # 结果为[20, 40, 60, 80]
# 上述过程中，步长均为正数
# 下面讨论步长为负数的情况
print('————————————————步长为负的情况————————————————')
# 当步长为负时：原列表的第一个元素变为新列表的最后一个元素；原列表的最后一个元素变为新列表的第一个元素
print('原列表：', lst5)
print('新列表：', lst5[::-1])
# 采用默认起始值的写法（默认从原列表的最后一个元素开始往前切）
print(lst5[:0:-2])      # 结果为[80, 60, 40, 20]
# 采用默认终止点的写法（默认从后往前切到原列表的第一个元素为止）
print(lst5[7::-1])      # 结果为[80, 70, 60, 50, 40, 30, 20, 10]
# 当终止点取0时，只能切到原列表的第二个元素
print(lst5[7:0:-1])      # 结果为[80, 70, 60, 50, 40, 30, 20]

# 列表元素的查询操作：in和not in
lst6 = [10, 20, "Python", "JOJO's Bizarre Advanture"]
print(10 in lst6)                      # True
print(10 not in lst6)                  # False
print('Star Platinum' in lst6)         # False
print('Star Platinum' not in lst6)     # True
# 列表元素的遍历
for item in lst6:
    print(item)

# 列表元素的添加
lst7 = [10, 20, 30]
print('修改前id：', id(lst7), '修改前元素：', lst7)
# 在列表末尾添加一个元素
lst7.append(40)
print('修改后id：', id(lst7), '修改后元素：', lst7)
# 在列表末尾一次性添加多个元素
lst8 = ['Hi', 'WORLD']
lst7.append(lst8)    # 将lst8作为一个整体加到lst7后面
print('修改后id：', id(lst7), '修改后元素：', lst7)
lst7.extend(lst8)
print('修改后id：', id(lst7), '修改后元素：', lst7)
# 在列表任意位置上添加一个元素
lst7.insert(1, 90)     # 在索引为1的位置添加元素90
print('修改后id：', id(lst7), '修改后元素：', lst7)
# 在列表任意位置添加多个元素
lst9 = [True, False, 'Hello']
lst7[1:] = lst9        # lst7从索引为1的位置开始一直到列表结束的所有元素，全部用lst9替换
print('修改后id：', id(lst7), '修改后元素：', lst7)

# 列表元素的删除操作
lst10 = [10, 20, 30, 40, 50, 60, 70, 80, 30]
print('修改前：', lst10)
# 从列表中移除一个元素（如果有重复元素，只移除第一个）
lst10.remove(30)
print('修改后：', lst10)
# 根据索引移除元素
lst10.pop(1)
print('修改后：', lst10)
lst10.pop()     # 如果不指定参数，pop()将移除列表的最后一个元素
print('修改后：', lst10)
# 切片操作：删除至少一个元素并生成一个新列表
new_lst = lst10[1:4]     # 利用切片，保留原列表中的某一段
print('原列表', lst10)
print('新列表', new_lst)
# 运用切片并不生成新列表的方式：用空列表替代原列表中的某一段
lst10[1:4] = []
print(lst10)
# clear() 清除列表中所有元素
lst10.clear()
print(lst10)
# del 删除列表
del lst10   # 把lst10这个对象删除了，后面的程序中再使用lst10这个变量名就会报错，若要继续使用就必须重新定义一遍

# 列表的修改
lst11 = [10, 20, 30, 40]
print('修改前：', lst11)
# 一次修改一个元素
lst11[2] = 100
print('修改后：', lst11)
# 利用切片一次性修改多个元素
lst11[1:3] = [300, 400, 500, 600]
print('修改后：', lst11)

# 列表元素的排序操作
lst12 = [20, 40, 10, 98, 54]
print("排序前的列表：", lst12, id(lst12))
# 开始排序，调用列表对象的sort方法，默认升序排序
lst12.sort()
print("排序后的列表：", lst12, id(lst12))
# 通过指定关键字参数，将列表中的元素进行排序
lst12.sort(reverse=True)    # 关键字reverse=True表示降序排序
print("排序后的列表：", lst12, id(lst12))
lst12.sort(reverse=False)    # 关键字reverse=False表示升序排序
print("排序后的列表：", lst12, id(lst12))
print('————————————————内置函数sorted()————————————————')
# 使用内置函数sorted()对列表进行排序（将产生一个新的列表对象）
lst_origin = [20, 40, 10, 98, 54]
lst_newone = sorted(lst_origin)
print(lst_origin, id(lst_origin))
print(lst_newone, id(lst_newone))
# 通过指定关键字参数，将列表中的元素进行排序
desc_lst = sorted(lst_origin, reverse=True)     # 降序排序
print(desc_lst)
asce_lst = sorted(lst_origin, reverse=False)     # 升序排序
print(asce_lst)

# 列表生成式：即生成列表的公式 ———————> 一般情况下，只有当列表中元素具有一定规律时，才会使用列表生成式
# 语法格式：[i*i for i in range(1,10)]
# i*i：表示列表元素的表达式（计算公式，i*i只是一个例子）； i：自定义变量； range(1,10):可迭代对象
# 注意事项：表示列表元素的表达式中通常包含自定义变量
lst13 = [i for i in range(1, 10)]
print(lst13)
lst14 = [i*i for i in range(1, 10)]
print(lst14)

# 多维列表，用逗号分隔维度
'''
   举例：
   X[:,0]————>取所有行的第0个数据,第二维下标位0的所有数据，第0列（从0开始）
   X[:,1]————>取所有行的第1个数据
   X[:,1:]————>第一维全部取，即所有行，列上从第一列开始取，不要第0列
   X[1,:]————>是取第1维中下标为1的元素的所有数据，第1行（从0开始）
   X[:2,1:]————>第一维取下标2之前的，即第2行之前（0，1两行），列上从第一列开始取，不要第0列
'''